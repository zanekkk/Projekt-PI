/** @module std.base */
import { MapContainer } from "./MapContainer";
import { MapIterator } from "../iterator/MapIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
import { IPair } from "../../utility/IPair";
/**
 * Base class for Multiple-key Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class MultiMap<Key, T, Source extends MultiMap<Key, T, Source>> extends MapContainer<Key, T, false, Source> {
    /**
     * Construct and insert an element.
     *
     * @param key Key to be mapped.
     * @param value Value to emplace.
     * @return An iterator to the newly inserted element.
     */
    abstract emplace(key: Key, value: T): MapIterator<Key, T, false, Source>;
    /**
     * Construct and insert element with hint.
     *
     * @param hint Hint for the position where the element can be inserted.
     * @param key Key of the new element.
     * @param val Value of the new element.
     * @return An iterator to the newly inserted element.
     */
    abstract emplace_hint(hint: MapIterator<Key, T, false, Source>, key: Key, val: T): MapIterator<Key, T, false, Source>;
    /**
     * Insert an element.
     *
     * @param pair A tuple to be referenced for the insert.
     * @return An iterator to the newly inserted element.
     */
    insert(pair: IPair<Key, T>): MapIterator<Key, T, false, Source>;
    /**
     * Insert an element with hint.
     *
     * @param hint Hint for the position where the element can be inserted.
     * @param pair A tuple to be referenced for the insert.
     * @return An iterator to the newly inserted element.
     */
    insert(hint: MapIterator<Key, T, false, Source>, pair: IPair<Key, T>): MapIterator<Key, T, false, Source>;
    /**
     * Insert range elements.
     *
     * @param first Input iterator of the first position.
     * @param last Input iteartor of the last position.
     */
    insert<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected abstract _Key_eq(x: Key, y: Key): boolean;
    /**
     * @hidden
     */
    protected _Erase_by_key(key: Key): number;
    /**
     * @inheritDoc
     */
    merge(source: Source): void;
}
//# sourceMappingURL=MultiMap.d.ts.map