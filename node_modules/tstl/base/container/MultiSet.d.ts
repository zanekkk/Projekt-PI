/** @module std.base */
import { SetContainer } from "./SetContainer";
import { SetIterator } from "../iterator/SetIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
/**
 * Base class for Multiple-key Set Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class MultiSet<Key, Source extends MultiSet<Key, Source>> extends SetContainer<Key, false, Source> {
    /**
     * Insert an element.
     *
     * @param pair A tuple to be referenced for the insert.
     * @return An iterator to the newly inserted element.
     */
    insert(key: Key): SetIterator<Key, false, Source>;
    /**
     * Insert an element with hint.
     *
     * @param hint Hint for the position where the element can be inserted.
     * @param pair A tuple to be referenced for the insert.
     * @return An iterator to the newly inserted element.
     */
    insert(hint: SetIterator<Key, false, Source>, key: Key): SetIterator<Key, false, Source>;
    /**
     * Insert range elements.
     *
     * @param first Input iterator of the first position.
     * @param last Input iteartor of the last position.
     */
    insert<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(begin: InputIterator, end: InputIterator): void;
    /**
     * @hidden
     */
    protected abstract _Key_eq(x: Key, y: Key): boolean;
    /**
     * @hidden
     */
    protected _Erase_by_val(key: Key): number;
    /**
     * @inheritDoc
     */
    merge(source: Source): void;
}
//# sourceMappingURL=MultiSet.d.ts.map