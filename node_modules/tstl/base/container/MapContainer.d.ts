/** @module std.base */
import { Container } from "./Container";
import { _IAssociativeContainer } from "./_IAssociativeContainer";
import { _MapElementList } from "./_MapElementList";
import { MapIterator, MapReverseIterator } from "../iterator/MapIterator";
import { Entry } from "../../utility/Entry";
import { IForwardIterator } from "../../iterator/IForwardIterator";
import { IPair } from "../../utility/IPair";
import { Pair } from "../../utility/Pair";
/**
 * Base class for Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class MapContainer<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source>> extends Container<Entry<Key, T>, Source, MapIterator<Key, T, Unique, Source>, MapReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> implements _IAssociativeContainer<Key, Entry<Key, T>, Source, MapIterator<Key, T, Unique, Source>, MapReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> {
    /**
     * @hidden
     */
    protected data_: _MapElementList<Key, T, Unique, Source>;
    /**
     * Default Constructor.
     */
    protected constructor();
    /**
     * @inheritDoc
     */
    assign<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    abstract find(key: Key): MapIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    begin(): MapIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    end(): MapIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    has(key: Key): boolean;
    /**
     * @inheritDoc
     */
    abstract count(key: Key): number;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @inheritDoc
     */
    push(...items: IPair<Key, T>[]): number;
    abstract emplace(key: Key, val: T): MapContainer.InsertRet<Key, T, Unique, Source>;
    abstract emplace_hint(hint: MapIterator<Key, T, Unique, Source>, key: Key, val: T): MapIterator<Key, T, Unique, Source>;
    insert(pair: IPair<Key, T>): MapContainer.InsertRet<Key, T, Unique, Source>;
    insert(hint: MapIterator<Key, T, Unique, Source>, pair: IPair<Key, T>): MapIterator<Key, T, Unique, Source>;
    insert<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected abstract _Insert_by_range<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    erase(key: Key): number;
    /**
     * @inheritDoc
     */
    erase(it: MapIterator<Key, T, Unique, Source>): MapIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    erase(begin: MapIterator<Key, T, Unique, Source>, end: MapIterator<Key, T, Unique, Source>): MapIterator<Key, T, Unique, Source>;
    /**
     * @hidden
     */
    protected abstract _Erase_by_key(key: Key): number;
    /**
     * @hidden
     */
    protected _Erase_by_range(first: MapIterator<Key, T, Unique, Source>, last?: MapIterator<Key, T, Unique, Source>): MapIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    swap(obj: Source): void;
    /**
     * Merge two containers.
     *
     * @param source Source container to transfer.
     */
    abstract merge(source: Source): void;
    /**
     * @hidden
     */
    protected abstract _Handle_insert(first: MapIterator<Key, T, Unique, Source>, last: MapIterator<Key, T, Unique, Source>): void;
    /**
     * @hidden
     */
    protected abstract _Handle_erase(first: MapIterator<Key, T, Unique, Source>, last: MapIterator<Key, T, Unique, Source>): void;
}
export declare namespace MapContainer {
    type InsertRet<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source>> = Unique extends true ? Pair<MapIterator<Key, T, Unique, Source>, boolean> : MapIterator<Key, T, Unique, Source>;
}
//# sourceMappingURL=MapContainer.d.ts.map