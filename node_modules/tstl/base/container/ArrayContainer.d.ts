/** @module std.base */
import { Container } from "./Container";
import { ILinearContainer } from "./ILinearContainer";
import { ArrayIterator, ArrayReverseIterator } from "../iterator/ArrayIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
/**
 * Base array container.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class ArrayContainer<T, SourceT extends ArrayContainer<T, SourceT>> extends Container<T, SourceT, ArrayIterator<T, SourceT>, ArrayReverseIterator<T, SourceT>, T> implements ILinearContainer<T, SourceT, ArrayIterator<T, SourceT>, ArrayReverseIterator<T, SourceT>> {
    /**
     * @inheritDoc
     */
    abstract resize(n: number): void;
    /**
     * @inheritDoc
     */
    begin(): ArrayIterator<T, SourceT>;
    /**
     * @inheritDoc
     */
    end(): ArrayIterator<T, SourceT>;
    /**
     * Get element at specific position.
     *
     * @param index Specific position.
     * @return The element at the *index*.
     */
    abstract at(index: number): T;
    /**
     * Change element at specific position.
     *
     * @param index Specific position.
     * @param val The new value to change.
     */
    abstract set(index: number, val: T): void;
    /**
     * @inheritDoc
     */
    front(): T;
    /**
     * @inheritDoc
     */
    front(val: T): void;
    /**
     * @inheritDoc
     */
    back(): T;
    /**
     * @inheritDoc
     */
    back(val: T): void;
    /**
     * @inheritDoc
     */
    abstract push_back(val: T): void;
    /**
     * @inheritDoc
     */
    insert(pos: ArrayIterator<T, SourceT>, val: T): ArrayIterator<T, SourceT>;
    /**
     * @inheritDoc
     */
    insert(pos: ArrayIterator<T, SourceT>, n: number, val: T): ArrayIterator<T, SourceT>;
    /**
     * @inheritDoc
     */
    insert<InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(pos: ArrayIterator<T, SourceT>, first: InputIterator, last: InputIterator): ArrayIterator<T, SourceT>;
    /**
     * @hidden
     */
    protected _Insert_by_repeating_val(position: ArrayIterator<T, SourceT>, n: number, val: T): ArrayIterator<T, SourceT>;
    /**
     * @hidden
     */
    protected abstract _Insert_by_range<InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(pos: ArrayIterator<T, SourceT>, first: InputIterator, last: InputIterator): ArrayIterator<T, SourceT>;
    /**
     * @inheritDoc
     */
    abstract pop_back(): void;
    /**
     * @inheritDoc
     */
    erase(it: ArrayIterator<T, SourceT>): ArrayIterator<T, SourceT>;
    /**
     * @inheritDoc
     */
    erase(first: ArrayIterator<T, SourceT>, last: ArrayIterator<T, SourceT>): ArrayIterator<T, SourceT>;
    /**
     * @hidden
     */
    protected abstract _Erase_by_range(first: ArrayIterator<T, SourceT>, last: ArrayIterator<T, SourceT>): ArrayIterator<T, SourceT>;
}
//# sourceMappingURL=ArrayContainer.d.ts.map