/** @module std.base */
import { SetContainer } from "./SetContainer";
import { SetIterator } from "../iterator/SetIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
import { Pair } from "../../utility/Pair";
/**
 * Base class for Unique-key Set Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class UniqueSet<Key, Source extends UniqueSet<Key, Source>> extends SetContainer<Key, true, Source> {
    /**
     * @inheritDoc
     */
    count(key: Key): number;
    /**
     * Insert an element.
     *
     * @param key Key to insert.
     * @return {@link Pair} of an iterator to the newly inserted element and `true`, if the specified *key* doesn't exist, otherwise {@link Pair} of iterator to ordinary element and `false`.
     */
    insert(key: Key): Pair<SetIterator<Key, true, Source>, boolean>;
    /**
     * Insert an element with hint.
     *
     * @param hint Hint for the position where the element can be inserted.
     * @param pair A tuple to be referenced for the insert.
     * @return An iterator to the newly inserted element, if the specified key doesn't exist, otherwise an iterator to the ordinary element.
     */
    insert(hint: SetIterator<Key, true, Source>, key: Key): SetIterator<Key, true, Source>;
    /**
     * Insert range elements.
     *
     * @param first Input iterator of the first position.
     * @param last Input iteartor of the last position.
     */
    insert<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * Extract an element by key.
     *
     * @param key Key to search for.
     * @return The extracted element.
     */
    extract(key: Key): Key;
    /**
     * Extract an element by iterator.
     *
     * @param pos The iterator to the element for extraction.
     * @return Iterator following the *pos*, strained by the extraction.
     */
    extract(it: SetIterator<Key, true, Source>): SetIterator<Key, true, Source>;
    /**
     * @hidden
     */
    private _Extract_by_val;
    /**
     * @hidden
     */
    private _Extract_by_iterator;
    /**
     * @hidden
     */
    protected _Erase_by_val(key: Key): number;
    /**
     * @inheritDoc
     */
    merge(source: Source): void;
}
//# sourceMappingURL=UniqueSet.d.ts.map