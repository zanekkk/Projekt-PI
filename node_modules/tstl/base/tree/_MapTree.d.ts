/** @module std.base */
import { _XTree } from "./_XTree";
import { _XTreeNode } from "./_XTreeNode";
import { MapContainer } from "../container/MapContainer";
import { MapIterator } from "../iterator/MapIterator";
import { IPair } from "../../utility/IPair";
import { Pair } from "../../utility/Pair";
/**
 * @hidden
 */
export declare abstract class _MapTree<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source>> extends _XTree<MapIterator<Key, T, Unique, Source>> {
    private source_;
    private key_compare_;
    private key_eq_;
    private value_compare_;
    constructor(source: Source, comp: (x: Key, y: Key) => boolean, it_comp: (x: MapIterator<Key, T, Unique, Source>, y: MapIterator<Key, T, Unique, Source>) => boolean);
    get_by_key(key: Key): _XTreeNode<MapIterator<Key, T, Unique, Source>> | null;
    abstract nearest_by_key(key: Key): _XTreeNode<MapIterator<Key, T, Unique, Source>> | null;
    lower_bound(key: Key): MapIterator<Key, T, Unique, Source>;
    abstract upper_bound(key: Key): MapIterator<Key, T, Unique, Source>;
    equal_range(key: Key): Pair<MapIterator<Key, T, Unique, Source>, MapIterator<Key, T, Unique, Source>>;
    source(): Source;
    key_comp(): (x: Key, y: Key) => boolean;
    key_eq(): (x: Key, y: Key) => boolean;
    value_comp(): (x: IPair<Key, T>, y: IPair<Key, T>) => boolean;
}
//# sourceMappingURL=_MapTree.d.ts.map