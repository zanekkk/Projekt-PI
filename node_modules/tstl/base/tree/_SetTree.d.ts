/** @module std.base */
import { _XTree } from "./_XTree";
import { _XTreeNode } from "./_XTreeNode";
import { SetContainer } from "../container/SetContainer";
import { SetIterator } from "../iterator/SetIterator";
import { Pair } from "../../utility/Pair";
/**
 * @hidden
 */
export declare abstract class _SetTree<T, Unique extends boolean, Source extends SetContainer<T, Unique, Source>> extends _XTree<SetIterator<T, Unique, Source>> {
    private source_;
    private key_comp_;
    private key_eq_;
    constructor(set: Source, comp: (x: T, y: T) => boolean, it_comp: (x: SetIterator<T, Unique, Source>, y: SetIterator<T, Unique, Source>) => boolean);
    get_by_key(val: T): _XTreeNode<SetIterator<T, Unique, Source>> | null;
    abstract nearest_by_key(val: T): _XTreeNode<SetIterator<T, Unique, Source>> | null;
    lower_bound(val: T): SetIterator<T, Unique, Source>;
    abstract upper_bound(val: T): SetIterator<T, Unique, Source>;
    equal_range(val: T): Pair<SetIterator<T, Unique, Source>, SetIterator<T, Unique, Source>>;
    source(): Source;
    key_comp(): (x: T, y: T) => boolean;
    key_eq(): (x: T, y: T) => boolean;
    value_comp(): (x: T, y: T) => boolean;
}
//# sourceMappingURL=_SetTree.d.ts.map