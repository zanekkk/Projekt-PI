/** @module std.base */
import { ListIterator } from "./ListIterator";
import { ReverseIterator } from "./ReverseIterator";
import { MapContainer } from "../container/MapContainer";
import { _MapElementList } from "../container/_MapElementList";
import { Entry } from "../../utility/Entry";
import { IPair } from "../../utility";
/**
 * Iterator of Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class MapIterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source>> extends ListIterator<Entry<Key, T>, Source, MapIterator<Key, T, Unique, Source>, MapReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> {
    /**
     * @hidden
     */
    private source_;
    /**
     * @hidden
     */
    constructor(list: _MapElementList<Key, T, Unique, Source>, prev: MapIterator<Key, T, Unique, Source>, next: MapIterator<Key, T, Unique, Source>, val: Entry<Key, T>);
    /**
     * @inheritDoc
     */
    reverse(): MapReverseIterator<Key, T, Unique, Source>;
    /**
     * @inheritDoc
     */
    source(): Source;
    /**
     * Get the first, key element.
     *
     * @return The first element.
     */
    readonly first: Key;
    /**
     * Get the second, stored element.
     *
     * @return The second element.
     */
    /**
    * Set the second, stored element.
    *
    * @param val The value to set.
    */
    second: T;
}
/**
 * Reverse iterator of Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class MapReverseIterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source>> extends ReverseIterator<Entry<Key, T>, Source, MapIterator<Key, T, Unique, Source>, MapReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> {
    /**
     * Initializer Constructor.
     *
     * @param base The base iterator.
     */
    constructor(base: MapIterator<Key, T, Unique, Source>);
    /**
     * @hidden
     */
    protected _Create_neighbor(base: MapIterator<Key, T, Unique, Source>): MapReverseIterator<Key, T, Unique, Source>;
    /**
     * Get the first, key element.
     *
     * @return The first element.
     */
    readonly first: Key;
    /**
     * Get the second, stored element.
     *
     * @return The second element.
     */
    /**
    * Set the second, stored element.
    *
    * @param val The value to set.
    */
    second: T;
}
//# sourceMappingURL=MapIterator.d.ts.map