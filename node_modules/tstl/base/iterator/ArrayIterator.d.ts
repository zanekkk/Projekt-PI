/** @module std.base */
import { ArrayContainer } from "../container/ArrayContainer";
import { Iterator } from "./Iterator";
import { ReverseIterator } from "./ReverseIterator";
import { IRandomAccessIterator } from "../../iterator/IRandomAccessIterator";
/**
 * Iterator of Array Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class ArrayIterator<T, Source extends ArrayContainer<T, Source>> implements Iterator<T, Source, ArrayIterator<T, Source>, ArrayReverseIterator<T, Source>, T>, IRandomAccessIterator<T, ArrayIterator<T, Source>> {
    /**
     * @hidden
     */
    private source_;
    /**
     * @hidden
     */
    private index_;
    /**
     * Initializer Constructor.
     *
     * @param source Source container.
     * @param index Index number.
     */
    constructor(source: Source, index: number);
    /**
     * @inheritDoc
     */
    reverse(): ArrayReverseIterator<T, Source>;
    /**
     * @inheritDoc
     */
    source(): Source;
    /**
     * @inheritDoc
     */
    index(): number;
    /**
     * @inheritDoc
     */
    /**
    * @inheritDoc
    */
    value: T;
    /**
     * @inheritDoc
     */
    prev(): ArrayIterator<T, Source>;
    /**
     * @inheritDoc
     */
    next(): ArrayIterator<T, Source>;
    /**
     * @inheritDoc
     */
    advance(n: number): ArrayIterator<T, Source>;
    /**
     * @inheritDoc
     */
    equals(obj: ArrayIterator<T, Source>): boolean;
}
/**
 * Reverse iterator of Array Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class ArrayReverseIterator<T, Source extends ArrayContainer<T, Source>> extends ReverseIterator<T, Source, ArrayIterator<T, Source>, ArrayReverseIterator<T, Source>, T> implements IRandomAccessIterator<T, ArrayReverseIterator<T, Source>> {
    /**
     * Initializer Constructor.
     *
     * @param base The base iterator.
     */
    constructor(base: ArrayIterator<T, Source>);
    /**
     * @hidden
     */
    protected _Create_neighbor(base: ArrayIterator<T, Source>): ArrayReverseIterator<T, Source>;
    /**
     * @inheritDoc
     */
    advance(n: number): ArrayReverseIterator<T, Source>;
    /**
     * @inheritDoc
     */
    index(): number;
    /**
     * @inheritDoc
     */
    /**
    * @inheritDoc
    */
    value: T;
}
//# sourceMappingURL=ArrayIterator.d.ts.map