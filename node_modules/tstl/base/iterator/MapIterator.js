"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.base */
//================================================================
var ListIterator_1 = require("./ListIterator");
var ReverseIterator_1 = require("./ReverseIterator");
/**
 * Iterator of Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var MapIterator = /** @class */ (function (_super) {
    __extends(MapIterator, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    function MapIterator(list, prev, next, val) {
        var _this = _super.call(this, prev, next, val) || this;
        _this.source_ = list;
        return _this;
    }
    /**
     * @inheritDoc
     */
    MapIterator.prototype.reverse = function () {
        return new MapReverseIterator(this);
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    MapIterator.prototype.source = function () {
        return this.source_.associative();
    };
    Object.defineProperty(MapIterator.prototype, "first", {
        /**
         * Get the first, key element.
         *
         * @return The first element.
         */
        get: function () {
            return this.value.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapIterator.prototype, "second", {
        /**
         * Get the second, stored element.
         *
         * @return The second element.
         */
        get: function () {
            return this.value.second;
        },
        /**
         * Set the second, stored element.
         *
         * @param val The value to set.
         */
        set: function (val) {
            this.value.second = val;
        },
        enumerable: true,
        configurable: true
    });
    return MapIterator;
}(ListIterator_1.ListIterator));
exports.MapIterator = MapIterator;
/**
 * Reverse iterator of Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var MapReverseIterator = /** @class */ (function (_super) {
    __extends(MapReverseIterator, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * @param base The base iterator.
     */
    function MapReverseIterator(base) {
        return _super.call(this, base) || this;
    }
    /**
     * @hidden
     */
    MapReverseIterator.prototype._Create_neighbor = function (base) {
        return new MapReverseIterator(base);
    };
    Object.defineProperty(MapReverseIterator.prototype, "first", {
        /* ---------------------------------------------------------
            ACCESSORS
        --------------------------------------------------------- */
        /**
         * Get the first, key element.
         *
         * @return The first element.
         */
        get: function () {
            return this.base_.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapReverseIterator.prototype, "second", {
        /**
         * Get the second, stored element.
         *
         * @return The second element.
         */
        get: function () {
            return this.base_.second;
        },
        /**
         * Set the second, stored element.
         *
         * @param val The value to set.
         */
        set: function (val) {
            this.base_.second = val;
        },
        enumerable: true,
        configurable: true
    });
    return MapReverseIterator;
}(ReverseIterator_1.ReverseIterator));
exports.MapReverseIterator = MapReverseIterator;
//# sourceMappingURL=MapIterator.js.map