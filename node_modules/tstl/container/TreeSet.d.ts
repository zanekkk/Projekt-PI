/** @module std */
import { UniqueSet } from "../base/container/UniqueSet";
import { ITreeSet } from "../base/container/ITreeSet";
import { SetIterator, SetReverseIterator } from "../base/iterator/SetIterator";
import { IForwardIterator } from "../iterator/IForwardIterator";
import { Pair } from "../utility/Pair";
/**
 * Unique-key Set based on Tree.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class TreeSet<Key> extends UniqueSet<Key, TreeSet<Key>> implements ITreeSet<Key, true, TreeSet<Key>> {
    /**
     * @hidden
     */
    private tree_;
    /**
     * Default Constructor.
     *
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(comp?: (x: Key, y: Key) => boolean);
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(items: Key[], comp?: (x: Key, y: Key) => boolean);
    /**
     * Copy Constructor.
     *
     * @param obj Object to copy.
     */
    constructor(container: TreeSet<Key>);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(first: Readonly<IForwardIterator<Key>>, last: Readonly<IForwardIterator<Key>>, comp?: (x: Key, y: Key) => boolean);
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    swap(obj: TreeSet<Key>): void;
    /**
     * @inheritDoc
     */
    find(key: Key): TreeSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    key_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    value_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    lower_bound(key: Key): TreeSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    upper_bound(key: Key): TreeSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    equal_range(key: Key): Pair<TreeSet.Iterator<Key>, TreeSet.Iterator<Key>>;
    /**
     * @hidden
     */
    protected _Insert_by_key(key: Key): Pair<TreeSet.Iterator<Key>, boolean>;
    /**
     * @hidden
     */
    protected _Insert_by_hint(hint: TreeSet.Iterator<Key>, key: Key): TreeSet.Iterator<Key>;
    /**
     * @hidden
     */
    protected _Insert_by_range<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected _Handle_insert(first: TreeSet.Iterator<Key>, last: TreeSet.Iterator<Key>): void;
    /**
     * @hidden
     */
    protected _Handle_erase(first: TreeSet.Iterator<Key>, last: TreeSet.Iterator<Key>): void;
}
export declare namespace TreeSet {
    type Iterator<Key> = SetIterator<Key, true, TreeSet<Key>>;
    type ReverseIterator<Key> = SetReverseIterator<Key, true, TreeSet<Key>>;
    const Iterator: typeof SetIterator;
    const ReverseIterator: typeof SetReverseIterator;
    type iterator<Key> = Iterator<Key>;
    type reverse_iterator<Key> = ReverseIterator<Key>;
    const iterator: typeof SetIterator;
    const reverse_iterator: typeof SetReverseIterator;
}
export import set = TreeSet;
//# sourceMappingURL=TreeSet.d.ts.map