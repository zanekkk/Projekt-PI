"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std */
//================================================================
var ArrayContainer_1 = require("../base/container/ArrayContainer");
var ArrayIterator_1 = require("../base/iterator/ArrayIterator");
var LogicError_1 = require("../exception/LogicError");
/**
 * Vector, an array with variable capacity.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var Vector = /** @class */ (function (_super) {
    __extends(Vector, _super);
    function Vector() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        // THE DATA
        _this.data_ = [];
        // CONSTRUCTORS BRANCH
        if (args.length === 0) {
            // DEFAULT CONSTRUCTOR
        }
        else if (args.length === 1 && args[0] instanceof Array) {
            // INITIALIZER CONSTRUCTOR
            var array = args[0];
            _this.data_ = array.slice();
        }
        else if (args.length === 1 && args[0] instanceof Vector) {
            // COPY CONSTRUCTOR
            _this.data_ = args[0].data_.slice();
        }
        else if (args.length === 2) {
            // ASSIGN CONSTRUCTOR
            _this.assign(args[0], args[1]);
        }
        return _this;
    }
    /**
     * @internal
     */
    Vector._Capsule = function (data) {
        var ret = new Vector();
        ret.data_ = data;
        return ret;
    };
    Vector.prototype.assign = function (first, second) {
        this.clear();
        this.insert(this.end(), first, second);
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.clear = function () {
        this.data_.splice(0, this.data_.length);
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.resize = function (n) {
        this.data_.length = n;
    };
    /* =========================================================
        ACCESSORS
    ========================================================= */
    /**
     * @inheritDoc
     */
    Vector.prototype.size = function () {
        return this.data_.length;
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.at = function (index) {
        if (0 <= index && index < this.size())
            return this.data_[index];
        else
            throw new LogicError_1.OutOfRange("Target index is greater than Vector's size: " + index + ", " + this.size());
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.set = function (index, val) {
        if (index < 0 || index >= this.size())
            throw new LogicError_1.OutOfRange("Target index is greater than Vector's size: " + index + ", " + this.size());
        this.data_[index] = val;
    };
    /**
     * Access data.
     *
     * @return An array capsuled by this {@link Vector}.
     */
    Vector.prototype.data = function () {
        return this.data_;
    };
    /**
     * @inheritDoc
     */
    Vector.prototype[Symbol.iterator] = function () {
        return this.data_[Symbol.iterator]();
    };
    /* =========================================================
        ELEMENTS I/O
            - INSERT
            - ERASE
    ============================================================
        INSERT
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    Vector.prototype.push = function () {
        var _a;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return (_a = this.data_).push.apply(_a, __spread(items));
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.push_back = function (val) {
        this.data_.push(val);
    };
    /**
     * @hidden
     */
    Vector.prototype._Insert_by_range = function (position, first, last) {
        var _a;
        if (position.index() >= this.size()) {
            // WHEN INSERT TO THE LAST
            var prev_size = this.size();
            for (; !first.equals(last); first = first.next())
                this.data_.push(first.value);
            return new Vector.Iterator(this, prev_size);
        }
        else {
            //----
            // INSERT TO THE MIDDLE POSITION
            //----
            // CUT RIGHT SIDE
            var spliced_array = this.data_.splice(position.index());
            // INSERT ELEMENTS
            for (; !first.equals(last); first = first.next())
                this.data_.push(first.value);
            (_a = this.data_).push.apply(_a, __spread(spliced_array)); // CONCAT THE SPLICEDS
            return position;
        }
    };
    /* ---------------------------------------------------------
        ERASE
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    Vector.prototype.pop_back = function () {
        this.data_.pop();
    };
    /**
     * @hidden
     */
    Vector.prototype._Erase_by_range = function (first, last) {
        if (first.index() >= this.size())
            return first;
        // ERASE ELEMENTS
        if (last.index() >= this.size()) {
            this.data_.splice(first.index());
            return this.end();
        }
        else
            this.data_.splice(first.index(), last.index() - first.index());
        return first;
    };
    /* ---------------------------------------------------------------
        UTILITIES
    --------------------------------------------------------------- */
    /**
     * @hidden
     */
    Vector.prototype.equals = function (obj) {
        return this.data_ === obj.data_;
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.swap = function (obj) {
        var _a;
        _a = __read([obj.data_, this.data_], 2), this.data_ = _a[0], obj.data_ = _a[1];
    };
    /**
     * @inheritDoc
     */
    Vector.prototype.toJSON = function () {
        return this.data_;
    };
    return Vector;
}(ArrayContainer_1.ArrayContainer));
exports.Vector = Vector;
(function (Vector) {
    // BODY
    Vector.Iterator = ArrayIterator_1.ArrayIterator;
    Vector.ReverseIterator = ArrayIterator_1.ArrayReverseIterator;
    // BODY
    Vector.iterator = Vector.Iterator;
    Vector.reverse_iterator = Vector.ReverseIterator;
})(Vector = exports.Vector || (exports.Vector = {}));
exports.Vector = Vector;
exports.vector = Vector;
//# sourceMappingURL=Vector.js.map