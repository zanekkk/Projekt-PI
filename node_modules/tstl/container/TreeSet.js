"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std */
//================================================================
var UniqueSet_1 = require("../base/container/UniqueSet");
var _ITreeContainer_1 = require("../base/container/_ITreeContainer");
var _UniqueSetTree_1 = require("../base/tree/_UniqueSetTree");
var SetIterator_1 = require("../base/iterator/SetIterator");
var Pair_1 = require("../utility/Pair");
/**
 * Unique-key Set based on Tree.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var TreeSet = /** @class */ (function (_super) {
    __extends(TreeSet, _super);
    function TreeSet() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _ITreeContainer_1._Construct.apply(void 0, __spread([_this, TreeSet,
            function (comp) {
                _this.tree_ = new _UniqueSetTree_1._UniqueSetTree(_this, comp);
            }], args));
        return _this;
    }
    /* ---------------------------------------------------------
        ASSIGN & CLEAR
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    TreeSet.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.tree_.clear();
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.swap = function (obj) {
        var _a;
        // SWAP CONTENTS
        _super.prototype.swap.call(this, obj);
        // SWAP RB-TREE
        _UniqueSetTree_1._UniqueSetTree._Swap_source(this.tree_, obj.tree_);
        _a = __read([obj.tree_, this.tree_], 2), this.tree_ = _a[0], obj.tree_ = _a[1];
    };
    /* =========================================================
        ACCESSORS
    ========================================================= */
    /**
     * @inheritDoc
     */
    TreeSet.prototype.find = function (key) {
        var node = this.tree_.nearest_by_key(key);
        if (node === null || this.tree_.key_eq()(node.value.value, key) === false)
            return this.end();
        else
            return node.value;
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.key_comp = function () {
        return this.tree_.key_comp();
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.value_comp = function () {
        return this.tree_.key_comp();
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.lower_bound = function (key) {
        return this.tree_.lower_bound(key);
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.upper_bound = function (key) {
        return this.tree_.upper_bound(key);
    };
    /**
     * @inheritDoc
     */
    TreeSet.prototype.equal_range = function (key) {
        return this.tree_.equal_range(key);
    };
    /* =========================================================
        ELEMENTS I/O
            - INSERT
            - POST-PROCESS
    ============================================================
        INSERT
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    TreeSet.prototype._Insert_by_key = function (key) {
        // FIND POSITION TO INSERT
        var it = this.lower_bound(key);
        if (!it.equals(this.end()) && this.tree_.key_eq()(it.value, key))
            return new Pair_1.Pair(it, false);
        // ITERATOR TO RETURN
        it = this.data_.insert(it, key);
        this._Handle_insert(it, it.next()); // POST-PROCESS
        return new Pair_1.Pair(it, true);
    };
    /**
     * @hidden
     */
    TreeSet.prototype._Insert_by_hint = function (hint, key) {
        var _this = this;
        return _ITreeContainer_1._Emplace_hint(this, hint, key, this.data_, this._Handle_insert.bind(this), function () { return _this._Insert_by_key(key).first; });
    };
    /**
     * @hidden
     */
    TreeSet.prototype._Insert_by_range = function (first, last) {
        for (; !first.equals(last); first = first.next())
            this._Insert_by_key(first.value);
    };
    /* ---------------------------------------------------------
        POST-PROCESS
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    TreeSet.prototype._Handle_insert = function (first, last) {
        for (; !first.equals(last); first = first.next())
            this.tree_.insert(first);
    };
    /**
     * @hidden
     */
    TreeSet.prototype._Handle_erase = function (first, last) {
        for (; !first.equals(last); first = first.next())
            this.tree_.erase(first);
    };
    return TreeSet;
}(UniqueSet_1.UniqueSet));
exports.TreeSet = TreeSet;
(function (TreeSet) {
    // BODY
    TreeSet.Iterator = SetIterator_1.SetIterator;
    TreeSet.ReverseIterator = SetIterator_1.SetReverseIterator;
    // BODY
    TreeSet.iterator = TreeSet.Iterator;
    TreeSet.reverse_iterator = TreeSet.ReverseIterator;
})(TreeSet = exports.TreeSet || (exports.TreeSet = {}));
exports.TreeSet = TreeSet;
exports.set = TreeSet;
//# sourceMappingURL=TreeSet.js.map