/** @module std.experimental */
import { _ISemaphore } from "../../base/thread/_ISemaphore";
/**
 * Semaphore.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class Semaphore implements _ISemaphore {
    /**
     * @hidden
     */
    private hold_count_;
    /**
     * @hidden
     */
    private locked_count_;
    /**
     * @hidden
     */
    private size_;
    /**
     * @hidden
     */
    private listeners_;
    constructor(size: number);
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @hidden
     */
    private _Compute_excess_count;
    /**
     * @inheritDoc
     */
    lock(count?: number): Promise<void>;
    /**
     * @inheritDoc
     */
    try_lock(count?: number): Promise<boolean>;
    /**
     * @inheritDoc
     */
    unlock(count?: number): Promise<void>;
}
export declare type semaphore = Semaphore;
export declare const semaphore: typeof Semaphore;
//# sourceMappingURL=Semaphore.d.ts.map