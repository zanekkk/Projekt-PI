"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Queue_1 = require("../../container/Queue");
var Pair_1 = require("../../utility/Pair");
var LogicError_1 = require("../../exception/LogicError");
var RuntimeError_1 = require("../../exception/RuntimeError");
/**
 * Semaphore.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var Semaphore = /** @class */ (function () {
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    function Semaphore(size) {
        this.hold_count_ = 0;
        this.locked_count_ = 0;
        this.size_ = size;
        this.listeners_ = new Queue_1.Queue();
    }
    /**
     * @inheritDoc
     */
    Semaphore.prototype.size = function () {
        return this.size_;
    };
    /**
     * @hidden
     */
    Semaphore.prototype._Compute_excess_count = function (count) {
        return Math.max(0, Math.min(this.locked_count_, this.size_) + count - this.size_);
    };
    /* ---------------------------------------------------------
        ACQURE & RELEASE
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    Semaphore.prototype.lock = function (count) {
        var _this = this;
        if (count === void 0) { count = 1; }
        return new Promise(function (resolve, reject) {
            // VALIDATE PARAMETER
            if (count < 1 || count > _this.size_) {
                reject(new LogicError_1.OutOfRange("Lock count to semaphore is out of its range."));
                return;
            }
            // INCREASE COUNT PROPERTIES
            var exceeded_count = _this._Compute_excess_count(count);
            _this.hold_count_ += exceeded_count;
            _this.locked_count_ += count;
            // BRANCH; KEEP OR GO?
            if (exceeded_count > 0)
                _this.listeners_.push(new Pair_1.Pair(resolve, exceeded_count));
            else
                resolve();
        });
    };
    /**
     * @inheritDoc
     */
    Semaphore.prototype.try_lock = function (count) {
        if (count === void 0) { count = 1; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // VALIDATE PARAMETER
                if (count < 1 || count > this.size_)
                    throw new LogicError_1.OutOfRange("Lock count to semaphore is out of its range.");
                // ALL OR NOTHING
                if (this.locked_count_ + count > this.size_)
                    return [2 /*return*/, false];
                this.locked_count_ += count;
                return [2 /*return*/, true];
            });
        });
    };
    /**
     * @inheritDoc
     */
    Semaphore.prototype.unlock = function (count) {
        if (count === void 0) { count = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var resolved_count, front, fn;
            return __generator(this, function (_a) {
                // VALIDATE PARAMETER
                if (count < 1 || count > this.size_)
                    throw new LogicError_1.OutOfRange("Unlock count to semaphore is out of its range.");
                else if (count > this.locked_count_)
                    throw new RuntimeError_1.RangeError("Number of unlocks to semaphore is greater than its locks.");
                resolved_count = Math.min(count, this.hold_count_);
                this.hold_count_ -= resolved_count;
                this.locked_count_ -= count;
                while (resolved_count !== 0) {
                    front = this.listeners_.front();
                    if (front.second > resolved_count) {
                        front.second -= resolved_count;
                        resolved_count = 0;
                    }
                    else {
                        fn = front.first;
                        // POP AND DECREAE COUNT FIRST
                        resolved_count -= front.second;
                        this.listeners_.pop();
                        fn(); // AND CALL LATER
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    return Semaphore;
}());
exports.Semaphore = Semaphore;
exports.semaphore = Semaphore;
//# sourceMappingURL=Semaphore.js.map